# Copyright (C) 2021-2024 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//base/security/huks/build/config.gni")
import("//base/security/huks/huks.gni")
import("//build/ohos.gni")

config("huks_config") {
  include_dirs = [
    "include",
    "//base/security/huks/services/huks_standard/huks_service/main/systemapi_wrap/dcm/include",
    "//base/security/huks/services/huks_standard/huks_service/main/hks_storage/include",
    "//base/security/huks/services/huks_standard/huks_service/main/plugin_proxy/include",
  ]
}

if (os_level == "standard") {
  ohos_static_library("libhuks_service_core_standard_static") {
    subsystem_name = "security"
    part_name = "huks"
    public_configs = [ ":huks_config" ]

    include_dirs = [
      "//base/security/huks/utils/list",
      "//base/security/huks/utils/mutex",
      "//base/security/huks/services/huks_standard/huks_service/main/os_dependency/idl/ipc",  # hks_response.h
      "//base/security/huks/services/huks_standard/huks_service/main/os_dependency/sa",  # hks_osaccount_check.h
      "//base/security/huks/services/huks_standard/huks_service/main/upgrade/lock/include",
      "//base/security/huks/services/huks_standard/huks_service/main/ha/include",

      
    ]

    sources = [
      "//base/security/huks/services/huks_standard/huks_service/main/hks_storage/src/hks_storage.c",
      "//base/security/huks/services/huks_standard/huks_service/main/hks_storage/src/hks_storage_file_lock.c",
      "//base/security/huks/services/huks_standard/huks_service/main/hks_storage/src/hks_storage_manager.c",
      "//base/security/huks/services/huks_standard/huks_service/main/hks_storage/src/hks_storage_utils.c",
      "src/hks_client_check.c",
      "src/hks_client_service.c",
      "src/hks_client_service_common.c",
      "src/hks_client_service_util.c",
      "src/hks_session_manager.c",
      "ukey_plugin_manager/src/hks_plugin_lifecycle_manager.cpp",
      "ukey_plugin_manager/src/hks_plugin_loader.cpp",
      "ukey_plugin_manager/src/hks_lib_interface.cpp",
    ]

    defines = [ "HKS_ENABLE_CLEAN_FILE" ]

    if (huks_security_level == "software") {
      defines += [ "HKS_UNTRUSTED_RUNNING_ENV" ]
    }

    if (huks_security_level == "trusted_environment") {
      sources += [ "//base/security/huks/services/huks_standard/huks_service/main/systemapi_wrap/dcm/src/hks_client_service_dcm.cpp" ]
    }

    sources += [ "../plugin_proxy/src/hks_plugin_adapter.cpp" ]

    sources += [
      "src/hks_upgrade_helper.c",
      "src/hks_upgrade_key_accesser.c",
    ]

    if (non_rwlock_support) {
      sources += [ "../hks_storage/src/hks_lock_lite.c" ]
    } else {
      sources += [ "../hks_storage/src/hks_lock.c" ]
    }

    deps = [
      "//base/security/huks/frameworks/huks_standard/main/common:libhuks_common_standard_static",
      "//base/security/huks/frameworks/huks_standard/main/os_dependency:libhuks_mem_standard_static",
      "//base/security/huks/frameworks/huks_standard/main/os_dependency:libhuks_util_standard_static",
      "//base/security/huks/services/huks_standard/huks_service/main/ha:libhuks_service_ha_static",
      "//base/security/huks/utils/file_operator:libhuks_utils_file_operator_static",
      "//base/security/huks/utils/list:libhuks_utils_list_static",
      "//base/security/huks/utils/mutex:libhuks_utils_mutex_static",
    ]

    if (enable_hks_mock) {
      deps += [ "//base/security/huks/services/huks_standard/huks_service/main/systemapi_mock:libhuks_service_systemapi_mock_static" ]
    } else {
      deps += [ "//base/security/huks/services/huks_standard/huks_service/main/systemapi_wrap/useridm:libhuks_service_systemapi_wrap_static" ]
    }

    cflags = [
      "-DHUKS_CHANGE_STORAGE_LEVEL_CONFIG=${huks_change_storage_level_config}",
    ]
    complete_static_lib = true

    branch_protector_ret = "pac_ret"

    sanitize = {
      integer_overflow = true
      cfi = true
      debug = false
      cfi_cross_dso = true
      boundary_sanitize = true
      ubsan = true
    }
    sources += [
      "src/hks_hitrace.c",
      "src/hks_report.c",
      "src/hks_report_check_key_exited.cpp",
      "src/hks_report_common.cpp",
      "src/hks_report_delete_key.cpp",
      "src/hks_report_generate_key.cpp",
      "src/hks_report_import_key.cpp",
      "src/hks_report_list_aliases.cpp",
      "src/hks_report_rename_key.cpp",
      "src/hks_report_data_size.cpp",
      "src/hks_report_three_stage.cpp",
      "src/hks_report_three_stage_build.cpp",
      "src/hks_report_three_stage_get.cpp",
    ]

    deps += [
      "//base/security/huks/services/huks_standard/huks_service/main/systemapi_wrap/hisysevent_wrapper:libhuks_utils_hisysevent_wrapper_static",
      "//base/security/huks/services/huks_standard/huks_service/main/systemapi_wrap/hitrace_meter_wrapper:libhuks_utils_hitrace_meter_wrapper_static",
    ]

    if (huks_enable_upgrade_key_storage_secure_level) {
      deps += [ "//base/security/huks/services/huks_standard/huks_service/main/upgrade/file_transfer:libhuks_upgrade_file_transfer_static" ]
    }

    if (enable_bundle_framework) {
      deps += [ "//base/security/huks/services/huks_standard/huks_service/main/systemapi_wrap/bms:libhuks_bms_systemapi_wrap_static" ]
    }

    configs = [
      "//base/security/huks/frameworks/config/build:l2_standard_common_config",
    ]
    external_deps = [
      "access_token:libaccesstoken_sdk",
      "bounds_checking_function:libsec_shared",
      "c_utils:utils",
      "hilog:libhilog",
      "hitrace:libhitracechain",
      "init:libbegetutil",
      "ipc:ipc_single",
    ]
  }
} else {
  ohos_static_library("libhuks_service_core_small_static") {
    public_configs = [ ":huks_config" ]
    configs = [
      "//base/security/huks/frameworks/config/build:l1_small_common_config",
    ]

    include_dirs = [
      "//base/security/huks/services/huks_standard/huks_service/main/os_dependency/idl/ipc",
      "//base/security/huks/services/huks_standard/huks_service/main/upgrade/lock/include",
      "//base/security/huks/utils/list",
      "//base/security/huks/utils/mutex",
      "//base/security/huks/service/huks_standard/huks_service/main/ha/include",
    ]
    defines = [ "HKS_ENABLE_CLEAN_FILE" ]

    sources = [
      "../hks_storage/src/hks_storage_file_lock.c",
      "../hks_storage/src/hks_storage_lite.c",
      "../hks_storage/src/hks_storage_manager.c",
      "../hks_storage/src/hks_storage_utils.c",
      "src/hks_client_check.c",
      "src/hks_client_service.c",
      "src/hks_client_service_common.c",
      "src/hks_client_service_util.c",
      "src/hks_session_manager.c",
    ]
    sources += [
      "src/hks_hitrace.c",
      "src/hks_report.c",
    ]

    sources += [
      "src/hks_upgrade_helper.c",
      "src/hks_upgrade_key_accesser.c",
    ]

    sources += [ "../plugin_proxy/src/hks_plugin_adapter_mock.c" ]

    if (huks_use_lite_storage == true) {
      sources += [
        "../hks_storage/src/hks_storage_adapter.c",
        "../hks_storage/src/hks_storage_lite.c",
      ]
    } else {
      sources += [ "../hks_storage/src/hks_storage.c" ]
    }
    if (non_rwlock_support) {
      sources += [ "../hks_storage/src/hks_lock_lite.c" ]
    } else {
      sources += [ "../hks_storage/src/hks_lock.c" ]
    }

    cflags = []

    if (huks_use_lite_storage == true) {
      cflags += [ "-D_STORAGE_LITE_" ]
    } else {
      if (ohos_kernel_type == "liteos_a") {
        cflags += [ "-D_BSD_SOURCE" ]
      } else {
        cflags += [ "-D_DEFAULT_SOURCE" ]
      }
    }

    deps = [
      "//base/security/huks/frameworks/huks_standard/main/common:libhuks_common_small_static",
      "//base/security/huks/frameworks/huks_standard/main/os_dependency:libhuks_os_dependency_small_static",
      "//base/security/huks/utils/file_operator:libhuks_utils_file_operator_static",
      "//base/security/huks/utils/list:libhuks_utils_list_static",
      "//base/security/huks/utils/mutex:libhuks_utils_mutex_static",
    ]

    complete_static_lib = true

    external_deps = [ "hilog_lite:hilog_shared" ]
  }
}
