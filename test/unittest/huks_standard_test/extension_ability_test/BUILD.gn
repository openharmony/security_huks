import("//base/security/huks/build/config.gni")
import("//base/security/huks/huks.gni")
import("//build/ohos.gni")
import("//build/test.gni")

module_output_path = "huks/huks/extension_unittest"

config("json_config") {
  cflags_cc = [ "-fexceptions" ]
}

if (os_level == "standard") {
  ohos_unittest("extension_unit_test") {
    module_out_path = module_output_path

    include_dirs = [
      ".",
      "include",
      "//base/security/huks/frameworks/huks_standard/main/common/include",
      "//base/security/huks/interfaces/inner_api/huks_standard/main/include",
      "//base/security/huks/services/huks_standard/huks_service/extension/ukey/ext_life_cycle_manger/inc",
      "//base/security/huks/services/huks_standard/huks_service/extension/ukey/connection/inc",
      "//base/security/huks/services/huks_standard/huks_service/main/extension_plugin_manger/inc",
      "//base/security/huks/services/huks_standard/huks_service/extension/ukey/common/inc",
      "//base/security/huks/services/huks_standard/huks_service/extension/ukey/handle_manager/inc",
      "//base/security/huks/services/huks_standard/huks_service/extension/ukey/handle_manager/src",
      "//base/security/huks/services/huks_standard/huks_service/main/os_dependency/idl/ipc",
      "//base/security/huks/test/unittest/huks_standard_test/interface_inner_test/sdk_test/include",
      "//base/security/huks/test/unittest/huks_common_test/include"
    ]

    sources = [
      "./provider_mgr_test/hks_provider_manger_test.cpp",
      "./plugin_loader_test/hks_plugin_manager_test.cpp",
      "./extension_connect_test/hks_extension_connection_test.cpp",
      "./ukey_common_test/ukey_common_test.cpp",
      "./handle_mgr_test/hks_handle_manager_test.cpp",
      # 新增：包装桩实现，使用链接器 --wrap 覆盖原函数
      "./sdk_test/hks_ipc_adapter_wrap.cpp",
      "./sdk_test/hks_ukey_test.cpp",
    ]

    configs = [
      "//base/security/huks/frameworks/config/build:l2_standard_common_config",
    ]

    deps = [
      "//base/security/huks/frameworks/huks_standard/main/crypto_engine:libhuks_crypto_engine_standard_static",
      "//base/security/huks/frameworks/huks_standard/main/os_dependency:libhuks_mem_standard_static",
      "//base/security/huks/frameworks/huks_standard/main/os_dependency:libhuks_os_dependency_standard_static",
      "//base/security/huks/frameworks/huks_standard/main/os_dependency:libhuks_util_standard_static",
      "//base/security/huks/services/huks_standard/huks_service/extension/ukey/ext_life_cycle_manger:libhuks_provider_life_cycle_manager_static",
      "//base/security/huks/services/huks_standard/huks_service/extension/ukey/common:libhuks_ukey_common_static",
      "//base/security/huks/services/huks_standard/huks_service/main/extension_plugin_manger:libhuks_ukey_plugin_extesnion_static",
      "//base/security/huks/services/huks_standard/huks_service/extension/ukey/connection:libhuks_extension_connection_static",
      "//base/security/huks/services/huks_standard/huks_service/extension/ukey/handle_manager:libhuks_remote_handle_manager_static"
    ]
    external_deps = [
      "c_utils:utils",
      "hilog:libhilog",
      "googletest:gmock",
      "ability_runtime:ability_connect_callback_stub",
      "ability_runtime:ability_manager",
      "ability_base:ability_base_want",
    ]

    if (os_level == "standard") {
      external_deps += [ "googletest:gtest" ]
    }

    cflags = [
      "-Wall",
      "-Werror",
    ]

    # 使用链接器 wrap 机制重定向到 __wrap_* 桩函数
    ldflags = [
      "-Wl,--wrap=HksIpcProviderRegAdapter",
      "-Wl,--wrap=HksIpcProviderUnregAdapter",
      "-Wl,--wrap=HksIpcCreateRemKeyHandleAdapter",
      "-Wl,--wrap=HksIpcGetRemoteHandleAdapter",
      "-Wl,--wrap=HksIpcCloseRemKeyHandleAdapter",
      "-Wl,--wrap=HksIpcSignAdapter",
      "-Wl,--wrap=HksIpcVerifyAdapter",
      "-Wl,--wrap=HksIpcExportProvCertsAdapter",
      "-Wl,--wrap=HksIpcExportCertAdapter",
      "-Wl,--wrap=HksIpcAuthUkeyPinAdapter",
      "-Wl,--wrap=HksIpcGetUkeyPinAuthStateAdapter",
      "-Wl,--wrap=HksIpcClearPinStatusAdapter",
      "-Wl,--wrap=HksIpcServiceOnGetRemotePropertyAdapter",
    ]

    subsystem_name = "security"
    part_name = "huks"
  }

  ohos_shared_library("fake_success") {
    sources = [
      "./plugin_loader_test/fake_success.cpp",
    ]

    include_dirs = [
      ".", 
      "include",
    ]

    cflags = [
      "-fPIC",
      "-Wall",
    ]

    sanitize = {
      integer_overflow = true
      cfi = true
      debug = false
      cfi_cross_dso = true
      boundary_sanitize = true
      ubsan = true
    }

    output_name = "fake_success"

    subsystem_name = "security"
    part_name = "huks"
  }

  ohos_shared_library("fake_fail") {
    sources = [
      "./plugin_loader_test/fake_fail.cpp",
    ]

    include_dirs = [
      ".", 
      "include",
    ]

    cflags = [
      "-fPIC",
      "-Wall",
    ]

    sanitize = {
      integer_overflow = true
      cfi = true
      debug = false
      cfi_cross_dso = true
      boundary_sanitize = true
      ubsan = true
    }

    output_name = "fake_fail"

    subsystem_name = "security"
    part_name = "huks"
  }

}